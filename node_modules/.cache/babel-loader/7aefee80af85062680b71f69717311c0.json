{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\n\nconst querystring_1 = __importDefault(require(\"querystring\"));\n\nconst API_ROOT_URL = 'https://www.myfxbook.com/api';\n\nclass MyfxbookApi {\n  constructor({\n    email,\n    password\n  }) {\n    this.email = email;\n    this.password = password;\n  }\n  /** Get session id (cached value is returned upon subsequent or parallel requests)*/\n\n\n  getSessionId() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.session) {\n        this.getLoginDataPromise = this.getLoginDataPromise || this.login();\n        const loginData = yield this.getLoginDataPromise;\n        this.session = this.session || loginData.session;\n      }\n\n      return this.session;\n    });\n  }\n\n  makeApiCall(endpoint, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = `${API_ROOT_URL}/${endpoint}.json?${querystring_1.default.stringify(params)}`;\n      const rawResponse = yield node_fetch_1.default(url, {\n        method: 'post'\n      });\n      const textResponse = yield rawResponse.text();\n      let isError = false;\n      let errorMessage = '';\n      let parsedData;\n\n      try {\n        parsedData = JSON.parse(textResponse);\n\n        if (parsedData.error) {\n          isError = true;\n          errorMessage = parsedData.message;\n        }\n      } catch (error) {\n        const errText = `${endpoint} error: ${JSON.stringify(error)}`;\n        const originalResponse = `Original response: ${JSON.stringify(textResponse)}`;\n        isError = true;\n        errorMessage = `${errText}. ${originalResponse}`;\n      }\n\n      if (isError) {\n        throw new Error(errorMessage);\n      }\n\n      return parsedData;\n    });\n  }\n  /**\n   * Fetches login data object\n   */\n\n\n  login() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('login', {\n        email: this.email,\n        password: this.password\n      });\n    });\n  }\n  /**\n   * Logs out from current session\n   */\n\n\n  logout() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('logout', {\n        session: yield this.getSessionId()\n      });\n    });\n  }\n  /**\n   * Get list of all trading accounts\n   */\n\n\n  getMyAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-my-accounts', {\n        session: yield this.getSessionId()\n      });\n    });\n  }\n  /**\n   * Get list of all watched accounts\n   */\n\n\n  getWatchedAccounts() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-watched-accounts', {\n        session: yield this.getSessionId()\n      });\n    });\n  }\n  /**\n   * Get all open orders for a given account\n   * @param id id of a trading account\n   */\n\n\n  getOpenOrders(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-open-orders', {\n        session: yield this.getSessionId(),\n        id: String(id)\n      });\n    });\n  }\n  /**\n   * Get all open trades for a given account\n   * @param id id of a trading account\n   */\n\n\n  getOpenTrades(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-open-trades', {\n        session: yield this.getSessionId(),\n        id: String(id)\n      });\n    });\n  }\n  /**\n   * Get history of all trades for a given account\n   * @param id id of a trading account\n   */\n\n\n  getHistory(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-history', {\n        session: yield this.getSessionId(),\n        id: String(id)\n      });\n    });\n  }\n  /**\n   * Get daily breakdown of all gains for a given account within time range\n   * @param id id of a trading account\n   * @param start start date, format : yyyy-MM-dd\n   * @param end end date, format : yyyy-MM-dd\n   */\n\n\n  getDailyGain(id, start, end) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-daily-gain', {\n        session: yield this.getSessionId(),\n        id: String(id),\n        start,\n        end\n      });\n    });\n  }\n  /**\n   * Get total gain for a given account within time range\n   * @param id id of a trading account\n   * @param start start date, format : yyyy-MM-dd\n   * @param end end date, format : yyyy-MM-dd\n   */\n\n\n  getGain(id, start, end) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-gain', {\n        session: yield this.getSessionId(),\n        id: String(id),\n        start,\n        end\n      });\n    });\n  }\n  /** Get Myfxbook Community Outlook data (https://www.myfxbook.com/community/outlook) */\n\n\n  getCommunityOutlook() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-community-outlook', {\n        session: yield this.getSessionId()\n      });\n    });\n  }\n  /**\n   * Get community outlook data broken down by a country for provided symbol\n   * @param symbol a trading instrument (currency pair)\n   */\n\n\n  getCommunityOutlookByCountry(symbol) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-community-outlook-by-country', {\n        session: yield this.getSessionId(),\n        symbol\n      });\n    });\n  }\n  /**\n   * Get daily breakdown of all account data within time range\n   * @param id id of a trading account\n   * @param start start date, format : yyyy-MM-dd\n   * @param end end date, format : yyyy-MM-dd\n   */\n\n\n  getDailyData(id, start, end) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.makeApiCall('get-data-daily', {\n        session: yield this.getSessionId(),\n        id: String(id),\n        start,\n        end\n      });\n    });\n  }\n\n}\n\nexports.default = MyfxbookApi;","map":{"version":3,"sources":["H:/Licenta/my-app/node_modules/myfxbook-api-client/lib/myfxbook-api.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__importDefault","mod","__esModule","Object","defineProperty","exports","node_fetch_1","require","querystring_1","API_ROOT_URL","MyfxbookApi","constructor","email","password","getSessionId","session","getLoginDataPromise","login","loginData","makeApiCall","endpoint","params","url","default","stringify","rawResponse","method","textResponse","text","isError","errorMessage","parsedData","JSON","parse","error","message","errText","originalResponse","Error","logout","getMyAccounts","getWatchedAccounts","getOpenOrders","id","String","getOpenTrades","getHistory","getDailyGain","start","end","getGain","getCommunityOutlook","getCommunityOutlookByCountry","symbol","getDailyData"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst node_fetch_1 = __importDefault(require(\"node-fetch\"));\nconst querystring_1 = __importDefault(require(\"querystring\"));\nconst API_ROOT_URL = 'https://www.myfxbook.com/api';\nclass MyfxbookApi {\n    constructor({ email, password }) {\n        this.email = email;\n        this.password = password;\n    }\n    /** Get session id (cached value is returned upon subsequent or parallel requests)*/\n    getSessionId() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.session) {\n                this.getLoginDataPromise = this.getLoginDataPromise || this.login();\n                const loginData = yield this.getLoginDataPromise;\n                this.session = this.session || loginData.session;\n            }\n            return this.session;\n        });\n    }\n    makeApiCall(endpoint, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const url = `${API_ROOT_URL}/${endpoint}.json?${querystring_1.default.stringify(params)}`;\n            const rawResponse = yield node_fetch_1.default(url, { method: 'post' });\n            const textResponse = yield rawResponse.text();\n            let isError = false;\n            let errorMessage = '';\n            let parsedData;\n            try {\n                parsedData = JSON.parse(textResponse);\n                if (parsedData.error) {\n                    isError = true;\n                    errorMessage = parsedData.message;\n                }\n            }\n            catch (error) {\n                const errText = `${endpoint} error: ${JSON.stringify(error)}`;\n                const originalResponse = `Original response: ${JSON.stringify(textResponse)}`;\n                isError = true;\n                errorMessage = `${errText}. ${originalResponse}`;\n            }\n            if (isError) {\n                throw new Error(errorMessage);\n            }\n            return parsedData;\n        });\n    }\n    /**\n     * Fetches login data object\n     */\n    login() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('login', {\n                email: this.email,\n                password: this.password\n            });\n        });\n    }\n    /**\n     * Logs out from current session\n     */\n    logout() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('logout', {\n                session: yield this.getSessionId()\n            });\n        });\n    }\n    /**\n     * Get list of all trading accounts\n     */\n    getMyAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-my-accounts', {\n                session: yield this.getSessionId()\n            });\n        });\n    }\n    /**\n     * Get list of all watched accounts\n     */\n    getWatchedAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-watched-accounts', {\n                session: yield this.getSessionId()\n            });\n        });\n    }\n    /**\n     * Get all open orders for a given account\n     * @param id id of a trading account\n     */\n    getOpenOrders(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-open-orders', {\n                session: yield this.getSessionId(),\n                id: String(id)\n            });\n        });\n    }\n    /**\n     * Get all open trades for a given account\n     * @param id id of a trading account\n     */\n    getOpenTrades(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-open-trades', {\n                session: yield this.getSessionId(),\n                id: String(id)\n            });\n        });\n    }\n    /**\n     * Get history of all trades for a given account\n     * @param id id of a trading account\n     */\n    getHistory(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-history', {\n                session: yield this.getSessionId(),\n                id: String(id)\n            });\n        });\n    }\n    /**\n     * Get daily breakdown of all gains for a given account within time range\n     * @param id id of a trading account\n     * @param start start date, format : yyyy-MM-dd\n     * @param end end date, format : yyyy-MM-dd\n     */\n    getDailyGain(id, start, end) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-daily-gain', {\n                session: yield this.getSessionId(),\n                id: String(id),\n                start,\n                end\n            });\n        });\n    }\n    /**\n     * Get total gain for a given account within time range\n     * @param id id of a trading account\n     * @param start start date, format : yyyy-MM-dd\n     * @param end end date, format : yyyy-MM-dd\n     */\n    getGain(id, start, end) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-gain', {\n                session: yield this.getSessionId(),\n                id: String(id),\n                start,\n                end\n            });\n        });\n    }\n    /** Get Myfxbook Community Outlook data (https://www.myfxbook.com/community/outlook) */\n    getCommunityOutlook() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-community-outlook', {\n                session: yield this.getSessionId()\n            });\n        });\n    }\n    /**\n     * Get community outlook data broken down by a country for provided symbol\n     * @param symbol a trading instrument (currency pair)\n     */\n    getCommunityOutlookByCountry(symbol) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-community-outlook-by-country', {\n                session: yield this.getSessionId(),\n                symbol\n            });\n        });\n    }\n    /**\n     * Get daily breakdown of all account data within time range\n     * @param id id of a trading account\n     * @param start start date, format : yyyy-MM-dd\n     * @param end end date, format : yyyy-MM-dd\n     */\n    getDailyData(id, start, end) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeApiCall('get-data-daily', {\n                session: yield this.getSessionId(),\n                id: String(id),\n                start,\n                end\n            });\n        });\n    }\n}\nexports.default = MyfxbookApi;\n"]},"metadata":{},"sourceType":"script"}